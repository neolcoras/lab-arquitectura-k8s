name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/mi-app-k8s
  NODE_VERSION: '16'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/package-lock.json
        
    - name: Install dependencies
      run: |
        cd src
        npm ci
        
    - name: Run linting
      run: |
        cd src
        npx eslint . || echo "ESLint not configured, skipping..."
        
    - name: Run tests
      run: |
        cd src
        npm test || echo "No tests found, skipping..."
        
    - name: Run security audit
      run: |
        cd src
        npm audit --audit-level=high

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-tag: ${{ steps.generate-tag.outputs.tag }}
      full-image: ${{ steps.generate-tag.outputs.full-image }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate consistent tag
      id: generate-tag
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          TAG="main-${{ github.sha }}"
        else
          BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
          TAG="${BRANCH_NAME}-${{ github.sha }}"
        fi
        FULL_IMAGE="${{ env.IMAGE_NAME }}:${TAG}"
        
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "full-image=${FULL_IMAGE}" >> $GITHUB_OUTPUT
        
        echo "Generated tag: ${TAG}"
        echo "Full image: ${FULL_IMAGE}"
        
        # También almacenar en variables de entorno para este job
        echo "TAG=${TAG}" >> $GITHUB_ENV
        echo "FULL_IMAGE=${FULL_IMAGE}" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.FULL_IMAGE }}
          ${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build local test image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: local-test:latest
        cache-from: type=gha
        
    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 3001:3000 local-test:latest
        sleep 10
        curl -f http://localhost:3001/health || exit 1
        docker stop test-container
        docker rm test-container

    - name: Verify image in registry
      run: |
        echo "Waiting for image to be available in registry..."
        sleep 30
        docker pull ${{ env.FULL_IMAGE }}
        echo "✅ Image verified in registry: ${{ env.FULL_IMAGE }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Minikube
      uses: medyagh/setup-minikube@master
      with:
        minikube-version: 1.32.0
        kubernetes-version: 1.28.3
        driver: docker

    - name: Enable Minikube addons and wait
      run: |
        minikube addons enable ingress
        echo "Waiting for ingress controller to be ready..."
        kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=300s

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Configure Docker credentials for Minikube
      run: |
        # Configurar credenciales de Docker en Minikube
        kubectl create secret docker-registry docker-hub-secret \
          --docker-server=docker.io \
          --docker-username=${{ secrets.DOCKER_USERNAME }} \
          --docker-password=${{ secrets.DOCKER_PASSWORD }} \
          --docker-email=${{ secrets.DOCKER_EMAIL || 'user@example.com' }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Debug and prepare image info
      run: |
        echo "=== DEBUG INFORMATION ==="
        echo "GitHub ref: ${{ github.ref }}"
        echo "GitHub SHA: ${{ github.sha }}"
        echo "Build job outputs:"
        echo "  - image-tag: '${{ needs.build-and-push.outputs.image-tag }}'"
        echo "  - full-image: '${{ needs.build-and-push.outputs.full-image }}'"
        
        # Generar la imagen dinámicamente como fallback
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          FALLBACK_TAG="main-${{ github.sha }}"
        else
          BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
          FALLBACK_TAG="${BRANCH_NAME}-${{ github.sha }}"
        fi
        
        FALLBACK_IMAGE="${{ env.IMAGE_NAME }}:${FALLBACK_TAG}"
        
        # Usar el output del job anterior si está disponible, sino usar fallback
        if [[ -n "${{ needs.build-and-push.outputs.full-image }}" ]]; then
          DEPLOY_IMAGE="${{ needs.build-and-push.outputs.full-image }}"
          echo "Using image from build job: ${DEPLOY_IMAGE}"
        else
          DEPLOY_IMAGE="${FALLBACK_IMAGE}"
          echo "Using fallback image: ${DEPLOY_IMAGE}"
        fi
        
        echo "DEPLOY_IMAGE=${DEPLOY_IMAGE}" >> $GITHUB_ENV
        echo "Final image to deploy: ${DEPLOY_IMAGE}"

    - name: Deploy and update with correct image
      run: |
        echo "Using image: $DEPLOY_IMAGE"
        
        if [[ -z "$DEPLOY_IMAGE" ]]; then
          echo "❌ Error: DEPLOY_IMAGE is empty!"
          exit 1
        fi
        
        # Primero aplicar el service
        kubectl apply -f k8s/service.yml
        
        # Crear el deployment dinámicamente con la imagen correcta
        cat > k8s/deployment-final.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: mi-app
          labels:
            app: mi-app
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: mi-app
          template:
            metadata:
              labels:
                app: mi-app
            spec:
              imagePullSecrets:
              - name: docker-hub-secret
              containers:
              - name: mi-app
                image: ${DEPLOY_IMAGE}
                ports:
                - containerPort: 3000
                env:
                - name: NODE_ENV
                  value: "production"
                - name: PORT
                  value: "3000"
                resources:
                  requests:
                    memory: "128Mi"
                    cpu: "100m"
                  limits:
                    memory: "256Mi"
                    cpu: "200m"
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 3000
                  initialDelaySeconds: 30
                  periodSeconds: 30
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 3000
                  initialDelaySeconds: 5
                  periodSeconds: 10
        EOF
        
        echo "Generated deployment file:"
        cat k8s/deployment-final.yaml
        
        # Validar el YAML
        kubectl apply --dry-run=client -f k8s/deployment-final.yaml
        
        # Aplicar el deployment
        kubectl apply -f k8s/deployment-final.yaml
        
        # Verificar que se creó correctamente
        DEPLOYED_IMAGE=$(kubectl get deployment mi-app -o jsonpath='{.spec.template.spec.containers[0].image}' || echo "ERROR")
        echo "Deployed image: ${DEPLOYED_IMAGE}"
        
        if [[ "$DEPLOYED_IMAGE" == "$DEPLOY_IMAGE" ]]; then
          echo "✅ Deployment created successfully with correct image"
        else
          echo "❌ Deployment created but with wrong image!"
          echo "Expected: $DEPLOY_IMAGE"
          echo "Got: $DEPLOYED_IMAGE"
          exit 1
        fi
        
        echo "Waiting a moment for deployment to start..."
        sleep 10

    - name: Wait for deployment rollout
      run: |
        echo "Waiting for deployment rollout..."
        kubectl rollout status deployment/mi-app --timeout=600s
        kubectl wait --for=condition=ready pod -l app=mi-app --timeout=600s

    - name: Debug Deployment Failure (if rollout times out)
      if: failure()
      run: |
        echo "Deployment rollout failed. Gathering debugging information..."
        echo "--- Deployment Status ---"
        kubectl get deployment mi-app -o wide
        echo "--- ReplicaSet Status ---"
        kubectl get replicaset -l app=mi-app -o wide
        echo "--- Pods Status ---"
        kubectl get pods -l app=mi-app -o wide
        echo "--- Pod Events ---"
        kubectl get events --field-selector involvedObject.kind=Pod --sort-by='.lastTimestamp' | tail -20
        echo "--- Pod Descriptions ---"
        kubectl describe pods -l app=mi-app
        echo "--- Container Logs (if any) ---"
        kubectl logs deployment/mi-app --all-containers=true --previous=true || echo "No previous logs"
        kubectl logs deployment/mi-app --all-containers=true || echo "No current logs"
        echo "--- Docker Hub Image Check ---"
        docker pull $DEPLOY_IMAGE || echo "Failed to pull image from Docker Hub"

    - name: Deploy ingress after everything is ready
      run: |
        echo "Deploying ingress..."
        kubectl apply -f k8s/ingress.yaml
        
    - name: Verify deployment
      run: |
        kubectl get pods -l app=mi-app
        kubectl get services
        kubectl get ingress
                
    - name: Test deployment
      run: |
        kubectl wait --for=condition=ready pod -l app=mi-app --timeout=300s
        kubectl port-forward service/mi-app-service 8080:80 &
        sleep 15
        curl -f http://localhost:8080/ || exit 1
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8080/info || exit 1
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        response=$(curl -s http://localhost:8080/)
        echo "Response: $response"
        if [[ $response == *"Node.js"* ]]; then
          echo "✅ Smoke test passed"
        else
          echo "❌ Smoke test failed"
          exit 1
        fi

    - name: Show deployed image info
      run: |
        echo "🚀 Successfully deployed image: $DEPLOY_IMAGE"
        kubectl get deployment mi-app -o jsonpath='{.spec.template.spec.containers[0].image}'