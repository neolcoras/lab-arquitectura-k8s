name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: mi-app
  IMAGE_TAG: ${{ github.sha }}
  NODE_VERSION: '16'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/package-lock.json
        
    - name: Install dependencies
      run: |
        cd src
        npm ci
        
    - name: Run linting
      run: |
        cd src
        npx eslint . || echo "ESLint not configured, skipping..."
        
    - name: Run tests
      run: |
        cd src
        npm test || echo "No tests found, skipping..."
        
    - name: Run security audit
      run: |
        cd src
        npm audit --audit-level=high

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Build Docker image
      run: |
        docker build -t $IMAGE_NAME:$IMAGE_TAG .
        docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
    
    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 3001:3000 $IMAGE_NAME:latest
        sleep 10
        curl -f http://localhost:3001/health || exit 1
        docker stop test-container
        docker rm test-container
        
    - name: Save Docker image
      run: |
        docker save $IMAGE_NAME:latest | gzip > mi-app-image.tar.gz
        
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: mi-app-image.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        
    - name: Setup Minikube
      uses: medyagh/setup-minikube@master
      with:
        minikube-version: 1.32.0
        kubernetes-version: 1.28.3
        driver: docker

    - name: Enable Minikube addons
      run: |
        minikube addons enable ingress

    - name: Wait for Ingress Controller to be ready # <-- ¡NUEVO PASO!
      run: |
        echo "Waiting for ingress-nginx controller to be ready..."
        kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=300s
        echo "Ingress controller is ready."  
        # Opcional: También puedes esperar por el servicio si el anterior no es suficiente
        # kubectl wait --namespace ingress-nginx \
        #   --for=condition=available deployment/ingress-nginx-controller \
        #   --timeout=300s

    - name: Set Docker environment for Minikube # <-- Nuevo paso para la alternativa 2
      run: |
        eval $(minikube docker-env)

    - name: Load Docker image to Minikube
      run: |
        gunzip -c mi-app-image.tar.gz | docker load

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/
        
    - name: Configure imagePullPolicy for Minikube
      run: |
        kubectl patch deployment mi-app -p '{"spec":{"template":{"spec":{"containers":[{"name":"mi-app","imagePullPolicy":"Never"}]}}}}'
        
    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/mi-app --timeout=300s
        
    - name: Test deployment
      run: |
        kubectl get pods -l app=mi-app
        kubectl get services
        kubectl wait --for=condition=ready pod -l app=mi-app --timeout=300s
        kubectl port-forward service/mi-app-service 8080:80 &
        sleep 15
        curl -f http://localhost:8080/ || exit 1
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8080/info || exit 1
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        response=$(curl -s http://localhost:8080/)
        echo "Response: $response"
        if [[ $response == *"Node.js"* ]]; then
          echo "✅ Smoke test passed"
        else
          echo "❌ Smoke test failed"
          exit 1
        fi