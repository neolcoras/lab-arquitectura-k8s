name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/mi-app-k8s
  IMAGE_TAG: ${{ github.sha }}
  NODE_VERSION: '16'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/package-lock.json
        
    - name: Install dependencies
      run: |
        cd src
        npm ci
        
    - name: Run linting
      run: |
        cd src
        npx eslint . || echo "ESLint not configured, skipping..."
        
    - name: Run tests
      run: |
        cd src
        npm test || echo "No tests found, skipping..."
        
    - name: Run security audit
      run: |
        cd src
        npm audit --audit-level=high

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=Local test image

    - name: Build local test image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: local-test:latest
        cache-from: type=gha
        
    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 3001:3000 local-test:latest
        sleep 10
        curl -f http://localhost:3001/health || exit 1
        docker stop test-container
        docker rm test-container
        
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Minikube
      uses: medyagh/setup-minikube@master
      with:
        minikube-version: 1.32.0
        kubernetes-version: 1.28.3
        driver: docker

    - name: Enable Minikube addons
      run: |
        minikube addons enable ingress

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Update deployment with new image
      run: |
        # Extraer el primer tag (que incluye el SHA)
        FULL_IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "Using image: $FULL_IMAGE_TAG"
        sed -i "s|image: mi-app:latest|image: $FULL_IMAGE_TAG|g" k8s/deployment.yaml
        cat k8s/deployment.yaml  
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/
        
    - name: Wait for rollout # <-- Original rollout wait
      run: |
        echo "Waiting for mi-app deployment rollout to finish..."
        kubectl rollout status deployment/mi-app --timeout=300s
        
    # --- DEBUGGING STEPS ADDED HERE ---
    - name: Debug Deployment Failure (if rollout times out)
      if: failure() # Only run this step if the previous step failed
      run: |
        echo "Deployment rollout failed. Gathering debugging information..."
        echo "--- Pods Status ---"
        kubectl get pods -l app=mi-app
        echo "--- Pod Events ---"
        kubectl get events --field-selector involvedObject.kind=Pod,involvedObject.name=$(kubectl get pods -l app=mi-app -o jsonpath='{.items[0].metadata.name}') --sort-by='.lastTimestamp'
        echo "--- Container Logs (from the first pod) ---"
        kubectl logs deployment/mi-app --all-containers=true
        echo "--- Describe Pod (from the first pod) ---"
        kubectl describe pod $(kubectl get pods -l app=mi-app -o jsonpath='{.items[0].metadata.name}')
       
    - name: Test deployment
      run: |
        kubectl get pods -l app=mi-app
        kubectl get services
        kubectl wait --for=condition=ready pod -l app=mi-app --timeout=300s
        kubectl port-forward service/mi-app-service 8080:80 &
        sleep 15
        curl -f http://localhost:8080/ || exit 1
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8080/info || exit 1
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        response=$(curl -s http://localhost:8080/)
        echo "Response: $response"
        if [[ $response == *"Node.js"* ]]; then
          echo "✅ Smoke test passed"
        else
          echo "❌ Smoke test failed"
          exit 1
        fi

    - name: Show deployed image info
      run: |
        echo "🚀 Successfully deployed image: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
        kubectl get deployment mi-app -o jsonpath='{.spec.template.spec.containers[0].image}'